#!/usr/bin/env python3
#	pcpublish - Authoring RSS feed and custom MP3s for a podcast
#	Copyright (C) 2022-2022 Johannes Bauer
#
#	This file is part of pcpublish.
#
#	pcpublish is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	pcpublish is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with pcpublish; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import json
import uuid
import contextlib
import collections
import shutil
import os
import tempfile
import subprocess
import datetime
import pytz
import mako.lookup
import babel.dates
from FriendlyArgumentParser import FriendlyArgumentParser
from Tools import MP3Tools, TimeTools, TextTools
from RSSFeedCreator import RSSFeedCreator
from CmdlineEscape import CmdlineEscape

class PodcastRenderer():
	def __init__(self, args):
		self._args = args
		with open(self._args.source_json) as f:
			self._data = json.load(f, object_pairs_hook = collections.OrderedDict)
		self._episode_no = None
		self._uid = 0

	def _add_guids(self):
		modified = False
		for episode in self._data["episodes"]:
			if "guid" not in episode:
				modified = True
				guid = str(uuid.uuid4())
				print(f"{episode['title']}: added GUID {guid}")
				episode["guid"] = guid
		if modified:
			with open("." + self._args.source_json, "w") as f:
				json.dump(self._data, f, indent = "\t", ensure_ascii = False)
				print(file = f)
			shutil.move("." + self._args.source_json, self._args.source_json)

	def _find(self, filename):
		search_dir = os.path.realpath(os.path.expanduser(self._args.search_dir))
		for (dirname, subdirs, files) in os.walk(search_dir):
			if filename in files:
				return dirname + "/" + filename
		raise FileNotFoundError(f"Could not find in search directory: {filename}")

	def _format(self, template_str, **additional_vars):
		format_vars = {
			"website":	self._data["meta"]["remote_uri"]["website"],
		}
		format_vars.update(additional_vars)
		return template_str.format(**format_vars)

	def _makedirs(self, path):
		with contextlib.suppress(FileExistsError):
			os.makedirs(path)

	def _process_episode(self, episode):
		try:
			episode["source_filename"] = self._find(episode["filename"])
			episode["info"] = MP3Tools.get_info(episode["source_filename"])
			episode["ext_info"] = {
				"duration":		TimeTools.format_hms(float(episode["info"]["streams"][0]["duration"])),
			}
			episode["have_audiofile"] = True
		except FileNotFoundError:
			# Put in dummy information so we can at least run successfully
			# without all source MP3s to check the website.
			episode["source_filename"] = None
			episode["info"] = {
				"format": {
					"size": 12345678,
				}
			}
			episode["ext_info"] = {
				"duration":		"12:34",
			}
			episode["have_audiofile"] = False
			print(f"Warning: {episode['filename']} could not be found in source directories, cannot render MP3.", file = sys.stderr)

		if "episode_no" not in episode:
			if self._episode_no is not None:
				self._episode_no += 1
			episode["episode_no"] = self._episode_no
		else:
			self._episode_no = episode["episode_no"]
		episode["recdate"] = TimeTools.parse(episode["recdate"])
		if "pubdate" in episode:
			episode["pubdate"] = TimeTools.parse(episode["pubdate"])
		else:
			episode["pubdate"] = episode["recdate"]

		pubdate_str = episode["pubdate"].strftime("%Y_%m_%d")
		title_filename = TextTools.make_filename(episode["title"])
		episode["target_filename_prefix"] = self._data["meta"]["episode"]["name"].format(episode_no = episode["episode_no"] or 0, pubdate = pubdate_str, title = title_filename)

		episode["dest_filename"] = {
			"episode":		self._args.output_dir + "/" + self._format(self._data["meta"]["episode"]["destination"], filename = episode["target_filename_prefix"] + ".mp3"),
			"cover_art":	{ key: self._args.output_dir + "/" + self._format(value["destination"], filename = episode["target_filename_prefix"]) for (key, value) in self._data["meta"].get("cover_images", { }).items() },
		}
		episode["remote_uri"] = {
			"episode":		self._format(self._data["meta"]["remote_uri"]["episode"], filename = episode["target_filename_prefix"] + ".mp3"),
			"cover_art":	{ key: self._format(value["uri"], filename = episode["target_filename_prefix"]) for (key, value) in self._data["meta"].get("cover_images", { }).items() if "uri" in value },
		}
		if "video" in self._data:
			episode["dest_filename"]["video"] = self._args.output_dir + "/" + self._format(self._data["video"]["destination"], filename = episode["target_filename_prefix"])
			if "uri" in self._data["video"]:
				episode["remote_uri"]["video"] = self._format(self._data["video"]["uri"], filename = episode["target_filename_prefix"]),

	@contextlib.contextmanager
	def _create_cover_art(self, episode, cover_art_instructions):
		with tempfile.NamedTemporaryFile(prefix = "cover_art_", suffix = ".jpg") as tmpfile:
			cmd = [ "convert" ]
			cmd += [ cover_art_instructions["source"] ]
			cmd += [ "-strip" ]
			for edit in cover_art_instructions.get("edits", [ ]):
				match edit["type"]:
					case "annotate":
						title = episode["cover_art_title"] if ("cover_art_title" in episode) else episode["title"]
						annotation_text = edit["text"].format(episode_no = episode["episode_no"] or 0, title = title)
						if "font" in edit:
							cmd += [ "-font", edit["font"] ]
						if "font_filename" in edit:
							cmd += [ "-font", os.path.expanduser(edit["font_filename"]) ]
						if "fill" in edit:
							cmd += [ "-fill", edit["fill"] ]
						if "gravity" in edit:
							cmd += [ "-gravity", edit["gravity"] ]
						if "pointsize" in edit:
							cmd += [ "-pointsize", str(edit["pointsize"]) ]
						if "stroke" in edit:
							cmd += [ "-stroke", edit["stroke"] ]
						if "strokewidth" in edit:
							cmd += [ "-strokewidth", str(edit["strokewidth"]) ]
						cmd += [ "-annotate", f"+{edit['pos'][0]}+{edit['pos'][1]}", annotation_text ]
					case "scale":
						if "geometry" in edit:
							cmd += [ "-geometry", edit["geometry"] ]
						if "quality" in edit:
							cmd += [ "-quality", str(edit["quality"]) ]
					case _:
						raise NotImplementedError(edit["type"])
			cmd += [ tmpfile.name ]
			if self._args.verbose >= 2:
				print(CmdlineEscape().cmdline(cmd))
			subprocess.check_call(cmd)
			if self._args.pause:
				input("Rendering finished, press ENTER to continue...")
			yield tmpfile.name

	def _render_episode_cover_art(self, name, episode, cover_art_instructions):
		if (not self._args.force_re_render) and os.path.isfile(episode["dest_filename"]["cover_art"][name]):
			return
		if self._args.verbose >= 1:
			print(f"Rendering episode {name} cover art: {episode['dest_filename']['cover_art'][name]}")
		try:
			with self._create_cover_art(episode, cover_art_instructions) as cover_filename:
				self._makedirs(os.path.dirname(episode["dest_filename"]["cover_art"][name]))
				with open(cover_filename, "rb") as in_f, open(episode["dest_filename"]["cover_art"][name], "wb") as out_f:
					out_f.write(in_f.read())
		except:
			with contextlib.suppress(FileNotFoundError):
				os.unlink(episode["dest_filename"]["cover_art"][name])
			raise

	def _render_episode_cover_arts(self, episode):
		for (name, cover_art_instructions) in self._data["meta"].get("cover_images", { }).items():
			self._render_episode_cover_art(name, episode, cover_art_instructions)

	def _render_episode_mp3(self, episode):
		if (not self._args.force_re_render) and os.path.isfile(episode["dest_filename"]["episode"]):
			return
		if self._args.verbose >= 1:
			print(f"Rendering episode MP3: {episode['dest_filename']['episode']}")
		try:
			self._makedirs(os.path.dirname(episode["dest_filename"]["episode"]))
			shutil.copy(episode["source_filename"], episode["dest_filename"]["episode"])
			MP3Tools.strip_tags(episode["dest_filename"]["episode"])
			MP3Tools.add_tag(episode["dest_filename"]["episode"], author = self._rssgen.authors, album_name = self._data["meta"]["title"], track_title = episode["title"], track_number = episode["episode_no"], genre = "podcast", year = episode["pubdate"].year, comment = episode["description"], comment_language = self._data["meta"]["locale"]["id3"], cover_image = episode["dest_filename"]["cover_art"].get("id3"), uri = self._data["meta"]["remote_uri"]["website"])
		except:
			with contextlib.suppress(FileNotFoundError):
				os.unlink(episode["dest_filename"]["episode"])
			raise

	def _render_episode_video(self, episode):
		if "video" not in self._data:
			return
		cover_art = self._data["video"].get("cover_art", "video")
		if not cover_art in episode["dest_filename"]["cover_art"]:
			print(f"Warning: refusing to render video without cover art (looking for '{cover_art}').")
			return
		if (not self._args.force_re_render) and os.path.isfile(episode["dest_filename"]["video"]):
			return
		cmd = [ "ffmpeg" ]
		cmd += [ "-loop", "1", "-r", "1" ]
		cmd += [ "-i", episode["dest_filename"]["cover_art"][cover_art] ]
		cmd += [ "-i", episode["dest_filename"]["episode"] ]
		cmd += [ "-c:v", "libx264", "-tune", "stillimage" ]
		cmd += [ "-c:a", "copy" ]
		cmd += [ "-pix_fmt", "yuv420p", "-shortest" ]
		cmd += [ episode["dest_filename"]["video"] ]
		try:
			if self._args.verbose >= 2:
				print(CmdlineEscape().cmdline(cmd))
			self._makedirs(os.path.dirname(episode["dest_filename"]["video"]))
			subprocess.check_call(cmd)
		except:
			with contextlib.suppress(FileNotFoundError):
				os.unlink(episode["dest_filename"]["video"])
			raise

	def _render_episode(self, episode):
		episode["rendered"] = False

		if episode["source_filename"] is None:
			return
		if episode.get("hidden", False):
			return

		now = pytz.UTC.localize(datetime.datetime.utcnow())
		if episode["pubdate"] > now:
			# Episode in future
			return

		episode["rendered"] = True
		self._render_episode_cover_arts(episode)
		self._render_episode_mp3(episode)
		self._render_episode_video(episode)

	def _format_date(self, dt, format = "short"):
		return babel.dates.format_date(dt, format = format, locale = self._data["meta"]["locale"]["locale"])

	def _gen_uid(self):
		self._uid += 1
		return self._uid

	def _render_episode_template(self, template, episode):
		template_path = os.path.realpath(os.path.dirname(template["filename"]))
		lookup = mako.lookup.TemplateLookup([ template_path, "." ], strict_undefined = True)
		mako_template = lookup.get_template(template["basename"])
		template_vars = {
			"data":			self._data,
			"episodes":		[ episode for episode in self._data["episodes"] if episode["rendered"] ],
			"all_episodes":	self._data["episodes"],
			"format_date":	self._format_date,
			"uid":			self._gen_uid,
			"cle":			CmdlineEscape(),
		}
		if episode is not None:
			if "uri" in template:
				uri = self._format(template["uri"], filename = episode["target_filename_prefix"])
				if "templates" not in episode["remote_uri"]:
					episode["remote_uri"]["templates"] = { }
				episode["remote_uri"]["templates"][template["filename"]] = uri
				template_vars["uri"] = uri
			template_vars["episode"] = episode
		output = mako_template.render(**template_vars)
		self._makedirs(os.path.dirname(template["outfile"]))
		with open(template["outfile"], "w") as f:
			f.write(output)

	def _render_global_template(self, template):
		return self._render_episode_template(template, episode = None)

	def _render_template(self, template):
		per_episode = template.get("per_episode", False)
		template["basename"] = os.path.basename(template["filename"])
		if self._args.verbose >= 1:
			print(f"Rendering template: {template['basename']}")
		if not per_episode:
			template["outfile"] = self._args.output_dir + "/templates/" + template["basename"]
			self._render_global_template(template)
		else:
			for episode in self._data["episodes"]:
				template["outfile"] = self._args.output_dir + "/" + self._format(template["destination"], filename = episode["target_filename_prefix"])
				self._render_episode_template(template, episode)

	def _process_general_variables(self):
		self._data["meta"]["remote_uri"]["rss_feed"] = self._format(self._data["meta"]["remote_uri"]["rss_feed"])
		self._data["meta"]["remote_uri"]["cover_image"] = self._format(self._data["meta"]["remote_uri"]["cover_image"])
		self._data["meta"]["locale"] = {
			"rss": self._data["meta"]["language"],
			"locale": self._data["meta"]["language"].replace("-", "_"),
			"id3": {
				"de-DE":		"ger",
			}[self._data["meta"]["language"]],
		}

	def run(self):
		if self._args.add_guids:
			self._add_guids()
		self._process_general_variables()
		self._makedirs(self._args.output_dir)
		for episode in self._data["episodes"]:
			self._process_episode(episode)
		for episode in self._data["episodes"]:
			self._render_episode(episode)
		self._rssgen = RSSFeedCreator(self._data, show_episodes_without_mp3 = self._args.show_episodes_without_mp3)
		self._rssgen.write_xml(self._args.output_dir + "/rss_feed.xml")
		for template in self._data.get("templates", [ ]):
			self._render_template(template)


parser = FriendlyArgumentParser(description = "Render podcast sources into an RSS feed.")
parser.add_argument("--show-episodes-without-mp3", action = "store_true", help = "By default, episodes without an MP3 are not shown in the RSS feed. This forces them to appear them there regardless.")
parser.add_argument("-f", "--force-re-render", action = "store_true", help = "Re-render MP3s even if the destination file already exsts.")
parser.add_argument("-a", "--add-guids", action = "store_true", help = "Add GUIDs where they are not yet present and save JSON file.")
parser.add_argument("-d", "--search-dir", metavar = "path", default = "~/podcast", help = "File to search sources for. Defaults to %(default)s.")
parser.add_argument("--pause", action = "store_true", help = "Pause after writing individual cover art for demo purposes.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("source_json", help = "JSON metadata definition of the podcast and its episodes.")
parser.add_argument("output_dir", help = "Output directory to render into.")
args = parser.parse_args(sys.argv[1:])

pcr = PodcastRenderer(args)
pcr.run()
